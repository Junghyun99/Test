name: Run Pytest

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - main  # main 브랜치로 PR 생성 시 실행

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
    # 1. 저장소를 클론
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Python 환경 설정
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10' # 원하는 Python 버전
        
    # 3. 필요한 의존성 설치
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. pytest 실행
    - name: Run Pytest
      run: |
        pytest --junitxml=report.xml
      # 실패 여부를 확인하기 위해 종료 코드를 저장
      continue-on-error: true


    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: pytest-report  # 아티팩트 이름
        path: report.xml     # 업로드할 파일


    - name: Extract failed test
      if: failure()  # 실패한 테스트가 있을 때만 실행
      run: |
        python -c '
import xml.etree.ElementTree as ET
import requests

# Parse the JUnit XML result file
tree = ET.parse("result.xml")
root = tree.getroot()

# Extract failed test cases
failed_tests = []
for testcase in root.findall(".//testcase[failure]"):
    failed_tests.append(testcase.attrib["name"])

# Prepare Slack message
if failed_tests:
    message = f"Tests failed: {', '.join(failed_tests)}"
else:
    message = "No tests failed."

# Send to Slack
slack_payload = {
    "text": f"Pytest Completed:\n- Status: {{"${{ job.status }}}}\n- Branch: {{"${{ github.ref_name }}}}\n- Commit: {{"${{ github.sha }}}}\n{message}"
}
requests.post("${{ secrets.SLACK_WEBHOOK }}", json=slack_payload)
        '

